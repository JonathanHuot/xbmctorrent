import os,string
from xbmctorrent import plugin
from xbmctorrent.scrapers import scraper
from xbmctorrent.ga import tracked
from xbmctorrent.caching import cached_route
from xbmctorrent.utils import ensure_fanart
from xbmctorrent.library import library_context
from xbmcswift2.logger import log
from bs4 import BeautifulSoup
from xbmctorrent.utils import url_get

BASE_URL = plugin.get_setting("base_cpb")
HEADERS = {
    "Referer": BASE_URL,
}

SORT_DATE="trie-date"
SORT_NOM="trie-nom"
SORT_TELECHARGEMENT="trie-telechargement"
SORT_SEEDS="trie-seeds"
SORT_LEECHS="trie-leechs"
SORT_CATEGORIE="trie-categorie"

SORT_DIRECTION_ASC="-a"
SORT_DIRECTION_DESC="-d"

@scraper("CPasBien - Torrent Francais - Films, Series", "%s/_template/cpasbien/_styles/_images/header1.jpg" % BASE_URL)
@plugin.route("/cpb")
@ensure_fanart
@tracked
def cpb_index():
    cats = [
    	{"label": "Recherche", "path": plugin.url_for("cpb_search")},
    	{"label": "Films",     "path": plugin.url_for("cpb_movies")},
    	{"label": "Series",    "path": plugin.url_for("cpb_series")},
    ]
    return cats
#    plugin.redirect(plugin.url_for("cpb_search"))

@plugin.route("/cpb/<cat>/<query>/<sort>/<page>")
@library_context
@ensure_fanart
@tracked
def cpb_page(cat, query, sort, page):

    log.debug("THE CAT = " + cat + " & THE Q = " + query )
    if not "cpasbien" in query:
    	url_adr = BASE_URL + "/" + cat + "/" + query.replace(" ","+") + "/page-" + str(page) + "," + sort
    else:
    	url_adr = BASE_URL + "/view_cat.php?categorie=" + cat + "&page=" + str(page) + "&trie=" + sort[5:] 
    log.debug("THE URL = " + url_adr)
    html_data = url_get(url_adr)

    soup = BeautifulSoup(html_data, "html5lib")
    name_nodes = soup.findAll("td", "torrent-aff")

    for name_node in name_nodes:
        title = name_node.find("a").text
        html_uri=name_node.find("a")["href"]
        torrent_basename = os.path.basename(html_uri)
        uri_addr= BASE_URL + "/_torrents/" + torrent_basename.replace(".html",".torrent")
        img_addr = BASE_URL + "/_pictures/" + torrent_basename.replace(".html",".jpg")
        yield {
            "label": title,
            "path": plugin.url_for("play", uri=uri_addr),
            "is_playable": True,
            "thumbnail" : img_addr , 
            "properties": {
              "fanart_image" : img_addr , 
            } ,
        }
    yield {
        "label": ">> Next page",
        "path": plugin.url_for("cpb_page", cat=cat, query=query, sort=sort, page=int(page) + 1),
        "is_playable": False,
    }

@plugin.route("/cpb/movies")
@tracked
def cpb_movies():
    url_adr = "%s/films/" % BASE_URL
    html_movies = url_get(url_adr)
    soup = BeautifulSoup(html_movies,"html5lib")
    s2 = soup.find("div","affichage-sous-categorie").find_all("a") #,"affichage-sous-categorie")
    sous_cat = []
    for aa in s2:
    	if aa.text != "": 
    		sous_cat_label = (aa.text).encode('ascii','replace')
    		sous_cat_name  = "films"
    		sous_cat_query = string.split(aa.get('href'),'/')[-2]
        	#log.debug(aa)
    		sous_cat_sort  = SORT_DATE + SORT_DIRECTION_DESC
    		sous_cat_page  = 0 
    		sous_cat += [ {"label": sous_cat_label, "path": plugin.url_for("cpb_page",cat=sous_cat_name,query=sous_cat_query,sort=sous_cat_sort,page=sous_cat_page)}, ]
    #log.debug(sous_cat)
    return sous_cat

@plugin.route("/cpb/series")
@tracked
def cpb_series():
    url_adr = "%s/series/" % BASE_URL
    html_movies = url_get(url_adr)
    soup = BeautifulSoup(html_movies,"html5lib")
    s2 = soup.find("div","affichage-sous-categorie").find_all("a") #,"affichage-sous-categorie")
    sous_cat = []
    for aa in s2:
        if aa.text != "":
                sous_cat_label = (aa.text).encode('ascii','replace')
                sous_cat_name  = "films"
                sous_cat_query = string.split(aa.get('href'),'/')[-2]
                sous_cat_sort  = SORT_DATE + SORT_DIRECTION_DESC
                sous_cat_page  = 0
                sous_cat += [ {"label": sous_cat_label, "path": plugin.url_for("cpb_page",cat=sous_cat_name,query=sous_cat_query,sort=sous_cat_sort,page=sous_cat_page)}, ]
    return sous_cat

@plugin.route("/cpb/search")
@tracked
def cpb_search():
    query = plugin.request.args_dict.pop("query", None)
    if not query:
        query = plugin.keyboard("", "XBMCtorrent - CPasBien - Recherche")
    if query:
        plugin.redirect(plugin.url_for("cpb_page", cat="recherche",query=query, sort=SORT_DATE + SORT_DIRECTION_DESC, page=0, **plugin.request.args_dict))
